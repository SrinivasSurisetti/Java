class CircularLinkedList {
    private Node last;
    private int size;

    public CircularLinkedList() {
        last = null;
        size = 0;
    }

    // Add an element to the circular list
    public void push(int data) {
        Node newNode = new Node(data);
        if (last == null) {
            last = newNode;
            last.next = last; // Point to itself
        } else {
            newNode.next = last.next;
            last.next = newNode;
            last = newNode;
        }
        size++;
    }

    // Remove and return the last element in the circular list
    public int pop() {
        if (last == null) {
            throw new IllegalStateException("List is empty");
        }

        Node temp = last.next;
        if (last.next == last) {
            last = null;
        } else {
            last.next = temp.next;
        }
        size--;
        return temp.data;
    }

    // Check if the list is empty
    public boolean isEmpty() {
        return last == null;
    }

    // Get the size of the list
    public int getSize() {
        return size;
    }

    // Print the circular list
    public void printList() {
        if (last == null) {
            System.out.println("List is empty");
            return;
        }

        Node temp = last.next;
        do {
            System.out.print(temp.data + " ");
            temp = temp.next;
        } while (temp != last.next);
        System.out.println();
    }
}
