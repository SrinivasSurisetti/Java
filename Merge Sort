public class MergeSort {

    // Method to sort an array using merge sort
    public static void mergeSort(int[] array) {
        if (array == null || array.length < 2) {
            return; // The array is already sorted
        }
        mergeSort(array, 0, array.length - 1);
    }

    // Helper method to perform merge sort on a subarray
    private static void mergeSort(int[] array, int left, int right) {
        if (left < right) {
            int middle = left + (right - left) / 2;

            // Recursively sort the left and right halves
            mergeSort(array, left, middle);
            mergeSort(array, middle + 1, right);

            // Merge the two sorted halves
            merge(array, left, middle, right);
        }
    }

    // Helper method to merge two sorted subarrays
    private static void merge(int[] array, int left, int middle, int right) {
        // Sizes of the two subarrays to be merged
        int leftSize = middle - left + 1;
        int rightSize = right - middle;

        // Create temporary arrays to hold the values
        int[] leftArray = new int[leftSize];
        int[] rightArray = new int[rightSize];

        // Copy the data into the temporary arrays
        for (int i = 0; i < leftSize; i++) {
            leftArray[i] = array[left + i];
        }
        for (int j = 0; j < rightSize; j++) {
            rightArray[j] = array[middle + 1 + j];
        }

        // Merge the temporary arrays

        // Initial indices of the first and second subarrays
        int leftIndex = 0, rightIndex = 0;

        // Initial index of the merged array
        int mergedIndex = left;

        // Compare each element and merge them in order
        while (leftIndex < leftSize && rightIndex < rightSize) {
            if (leftArray[leftIndex] <= rightArray[rightIndex]) {
                array[mergedIndex] = leftArray[leftIndex];
                leftIndex++;
            } else {
                array[mergedIndex] = rightArray[rightIndex];
                rightIndex++;
            }
            mergedIndex++;
        }

        // Copy the remaining elements of leftArray, if any
        while (leftIndex < leftSize) {
            array[mergedIndex] = leftArray[leftIndex];
            leftIndex++;
            mergedIndex++;
        }

        // Copy the remaining elements of rightArray, if any
        while (rightIndex < rightSize) {
            array[mergedIndex] = rightArray[rightIndex];
            rightIndex++;
            mergedIndex++;
        }
    }

    // Main method to test the merge sort
    public static void main(String[] args) {
        int[] array = {12, 11, 13, 5, 6, 7};
        System.out.println("Given Array");
        printArray(array);

        mergeSort(array);

        System.out.println("\nSorted array");
        printArray(array);
    }

    // Utility method to print the array
    private static void printArray(int[] array) {
        for (int i : array) {
            System.out.print(i + " ");
        }
        System.out.println();
    }
}
